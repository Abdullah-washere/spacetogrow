#include <FastLED.h>

#define LED_PIN 2
#define NUM_LEDS 487

CRGB leds[NUM_LEDS];

// Ultrasonic sensor pins
const int trigPin = 9;
const int echoPin = 10;

void setup() {
  FastLED.addLeds<WS2812, LED_PIN, GRB>(leds, NUM_LEDS);
  FastLED.setMaxPowerInVoltsAndMilliamps(5, 500);
  FastLED.clear();
  FastLED.show();

  pinMode(trigPin, OUTPUT); // Sets the trigPin as an Output
  pinMode(echoPin, INPUT); // Sets the echoPin as an Input
  Serial.begin(9600); // Starts the serial communication
}

void loop() {
  // Clears the trigPin
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);

  // Sets the trigPin on HIGH state for 10 microseconds
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  // Reads the echoPin, returns the sound wave travel time in microseconds
  long duration = pulseIn(echoPin, HIGH);

  // Calculating the distance in inches
  float distance = duration * 0.0133 / 6;

  int safetyDistance = distance;
  if (safetyDistance <= 5) {
    // Activate color pattern when sensor is active
    unsigned long startTime = millis();
    while (millis() - startTime <= 10000) {
      swirlEffect();
    }
  }
  else {
    // Activate white lights when sensor is not active
    unsigned long startTime = millis();
    while (millis() - startTime <= 10000) {
      whiteLights();
    }
  }

  // Prints the distance on the Serial Monitor
  Serial.print("Distance: ");
  Serial.print(distance);
  Serial.println(" inches");
}

void swirlEffect() {
  static uint8_t hue = 0;

  for (int i = 0; i < NUM_LEDS; i++) {
    leds[i] = CHSV(hue, 255, 255);
    hue += 1;
  }

  FastLED.show();
  delay(20);
}

void whiteLights() {
  for (int i = 0; i < NUM_LEDS; i++) {
    leds[i] = CRGB::White;
  }

  FastLED.show();
  delay(100); // Delay between each white light

  // Turn off all the lights
  FastLED.clear();
  FastLED.show();
  delay(500);
}
